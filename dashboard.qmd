---
title: "Dairy Production"
format: 
  dashboard:
    nav-buttons: [github]
    github: https://github.com/WilliamBanda/Data-Dashboards-User-Perception
theme: [sandstone, theme/custom.scss]
fig-width: 4
fig-asp: 0.6
params:
  month: 
  year: 
  threshold_diff: 0.02
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-packages
#| message: false
#| warning: false
#| include: false

options(repos = "https://cran.rstudio.com")

# Suppress messages and warnings globally
suppressPackageStartupMessages({
  install.packages("reshape2", quiet = TRUE)
  install.packages(c("writexl", "shiny", "ggplot2"), quiet = TRUE)
  
  library(tidyverse)
  library(readr)
  library(dplyr)
  library(openxlsx)
  library(ggplot2)
  library(shiny)
  library(writexl)
  library(plotly)
  library(reshape2)
  library(readxl)
  library(scales)
  library(DT)
  library(gt)
  library(lubridate)
})

# Set a theme
theme_set(theme_minimal(base_size = 24, base_family = "Atkinson Hyperlegible"))
```

```{r}
#| label: load-data
#| message: false

Data <- read_excel("tidy_data.xlsx")
Data <- Data %>%
  filter(format(as.Date(date), "%Y") %in% 2018:2023)
Data$year <- factor(year(Data$date))


```

```{r}

# Save data as Excel file
write.xlsx(Data, "data_to_download.xlsx")

ui <- fluidPage(
  # Other UI elements...
  downloadButton("downloadData", "Download Data")
)

server <- function(input, output) {
  
  # Other server logic...
  
  output$downloadData <- downloadHandler(
    filename = "data_to_download.xlsx",
    content = function(file) {
      file.copy("data_to_download.xlsx", file)
    }
  )
}

```

```{r}
#| label: set-inputs

time_period <- "2018-2023"
```

```{r}
#| label: prep-data
```

#  {.sidebar}

This dashboard displays statistics for:

|              |                     |
|--------------|---------------------|
| **FARM**     | Harper Future Farm  |
| **Unit**     | Dairy               |
| **Year**    | `{r} time_period`   |

------------------------------------------------------------------------

`{r} time_period` Period:

|                          |            |
|--------------------------|------------|
| **Created by**                |  W. Banda |

------------------------------------------------------------------------

::: {.callout-note collapse="true"}
## Data source

The data used in this dashboard is from the Harper Adams Future Farm dairy.

:::

# All

```{r}
#| label: all-values
#| results: hide

# Calculate average milk produced from 2018-2023
avg_milk_produced <- Data %>%
  summarize(avg_milk_produced = mean(milk_produced, na.rm = TRUE)) %>%
  pull(avg_milk_produced) %>% round(digits = 1)

# Calculate average milk per cow from 2018-2023
avg_milk_per_cow <- Data %>%
  summarize(avg_milk_per_cow = mean(milk_per_cow, na.rm = TRUE)) %>%
  pull(avg_milk_per_cow) %>% round(digits = 1)

# Calculate average protein % from 2018-2023
avg_protein <- Data %>%
  summarize(avg_protein = mean(protein, na.rm = TRUE)) %>%
  pull(avg_protein) %>% round(digits = 1)

```

## Row {height="25%"}

```{r}
#| content: valuebox
#| title: "Average Total Milk Produced (KG)"

list(
  icon = "file-medical",
  color = "green",
  value = avg_milk_produced
)
```

```{r}
#| content: valuebox
#| title: "Average Milk per Cow (Kg)"

list(
  icon = "clipboard2-pulse",
  color = "blue",
  value = avg_milk_per_cow
)
```

```{r}
#| content: valuebox
#| title: "Milk Quality (Protein %)"

list(
  icon = "calendar-week",
  color = "cyan",
  value = avg_protein
)
```

## Row {height="40%"}

### Column {width="40%"}

```{r}
#| title: Yearly Averages for Number of Cows in Tank

# Calculate yearly averages for cows_in_tank
yearlyData <- Data %>%
  group_by(year) %>%
  summarize(avg_cows_in_tank = mean(cows_in_tank, na.rm = TRUE))

# Create a bar plot for the yearly averages of cows_in_tank using ggplot
p <- ggplot(yearlyData, aes(x = year, y = avg_cows_in_tank)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(x = "Year", y = "Average Number of Cows in Tank") +
  theme_minimal()+
  theme(legend.position = "none") 

# Convert the ggplot to a plotly object
fig <- ggplotly(p)

# Print the interactive Plotly graph
fig
```

### Column {width="60%"}

```{r}
#| title: "Yearly Average Protein Percentage"

# Convert date to year
Data$year <- lubridate::year(Data$date)

# Aggregate data to calculate yearly averages and standard errors
yearly_data <- Data %>%
  group_by(year) %>%
  summarise(
    protein = mean(protein, na.rm = TRUE),  # Mean protein percentage
    protein_se = sd(protein, na.rm = TRUE) / sqrt(n())  # Standard error of protein percentage
  )

# Check for missing values
if (any(is.na(yearly_data$protein)) | any(is.na(yearly_data$protein_se))) {
  warning("Missing values detected in protein or protein_se. Consider handling missing values before plotting.")
}

# Plot protein percentages with horizontal error bars
p1 <- ggplot(yearly_data, aes(x = year, y = protein)) +
  geom_line(size = 1.2, color = "steelblue") +  # Line for average protein
  geom_point(size = 3, color = "steelblue") +  # Points for each year
  geom_errorbarh(aes(xmin = year - protein_se, xmax = year + protein_se),  # Horizontal error bars
                 height = 0.1, color = "red", size = 0.8) +  # Error bar customization (adjusted)
  labs(x = "Year", y = "Protein Percentage (%)") +
  theme_minimal()  # Plot theme

# Convert ggplot to plotly object
fig1 <- ggplotly(p1)

# Display the interactive plot
fig1

```

## Row {height="40%"}

```{r}
#| title: "Daily Average Milk per Cow per Year"

# Aggregate data to calculate yearly total or average
yearly_data <- Data %>%
  group_by(year) %>%
  summarise(milk_per_cow = mean(milk_per_cow, na.rm = TRUE))  # Use sum() if you want total instead of mean

# Create the bar plot with ggplot2
p <- ggplot(yearly_data, aes(x = factor(year), y = milk_per_cow, fill = factor(year))) +
  geom_bar(stat = "identity") +
  labs(x = "Year", y = "Av/Milk/Cow (KGs)") +
  theme_minimal() +
  theme(legend.position = "none") 

# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)

# Display the interactive plot
interactive_plot

```

```{r}
#| title: Yearly Average Fat Percentage

# Aggregate data to calculate yearly averages and standard errors for fat
yearly_data_fat <- Data %>%
  group_by(year) %>%
  summarise(
    fat = mean(fat, na.rm = TRUE),
    fat_se = sd(fat, na.rm = TRUE) / sqrt(n())
  )

# Plot fat percentages with horizontal error bars
p2 <- ggplot(yearly_data_fat, aes(x = year, y = fat)) +
  geom_line(size = 1.2, color = "coral") +
  geom_point(size = 3, color = "coral") +
  geom_errorbarh(aes(xmin = year - fat_se, xmax = year + fat_se),
                 height = 0.1, color = "darkred", size = 0.8) +  # Horizontal error bars
  labs(x = "Year", y = "Fat Percentage (%)") +
  theme_minimal()

# Adjust the plot limits to ensure error bars are visible
p2 <- p2 + xlim(min(yearly_data_fat$year - yearly_data_fat$fat_se) * 0.9,
                max(yearly_data_fat$year + yearly_data_fat$fat_se) * 1.1)

# Convert ggplot to plotly object
fig2 <- ggplotly(p2)

# Display the interactive plot
fig2

```

# Production {orientation="columns"}

## Column {width="60%"}

```{r}
#| label: Production-values
#| results: hide

# Filter data for the years 2018-2023
Data_filtered <- Data %>%
  filter(format(as.Date(date), "%Y") %in% 2018:2023)

# Calculate average cows_in_milk from 2018-2023 
avg_cows_in_milk <- Data_filtered %>%
  summarize(avg_cows_in_milk = round(mean(cows_in_milk, na.rm = TRUE))) %>%
  pull(avg_cows_in_milk)

# Calculate average cows_in_tank from 2018-2023 
avg_cows_in_tank <- Data_filtered %>%
  summarize(avg_cows_in_tank = round(mean(cows_in_tank, na.rm = TRUE))) %>%
  pull(avg_cows_in_tank)


```

### Row {height="20%"}

```{r}
#| component: valuebox
#| title: "Cows in Milk Average"

list( color = "primary",
  value = avg_cows_in_milk
)
```

```{r}
#| component: valuebox
#| title: "Cows in Tank Average"

list(color = "primary",
  value = avg_cows_in_tank
)
```

### Row {height="40%"}

```{r}
#| title: Comparison of Dairy Cow by Class per Year

# Reshape the data to long format
long_data <- Data %>%
  pivot_longer(cols = c(straw_yard, highs, trial1, trial2, low), 
               names_to = "variable", 
               values_to = "value")

# Create the bar plot with ggplot2
p <- ggplot(long_data, aes(x = factor(year), y = value, fill = variable)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Year", y = "Average Milk/Cow/Day (KGs)				
", fill = "Class") +
  theme_minimal()

# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)

# Display the interactive plot
interactive_plot

```

### Row {height="40%" .tabset}

```{r}
#| title: Yearly Average Comparison of Trial1 and Trial2

# Aggregate data to calculate yearly averages and standard errors
yearly_data <- Data %>%
  group_by(year) %>%
  summarise(
    trial1 = mean(trial1, na.rm = TRUE),
    trial1_se = sd(trial1, na.rm = TRUE) / sqrt(n()),
    trial2 = mean(trial2, na.rm = TRUE),
    trial2_se = sd(trial2, na.rm = TRUE) / sqrt(n())
  )

# Reshape data for visualization
tidy_yearly_data <- yearly_data %>%
  pivot_longer(cols = c(trial1, trial2), names_to = "variable", values_to = "value") %>%
  pivot_longer(cols = c(trial1_se, trial2_se), names_to = "se_variable", values_to = "se_value")

# Create the line plot with ggplot2
p <- ggplot(tidy_yearly_data, aes(x = year, y = value, color = variable, group = variable)) +
  geom_line() +
  geom_point() +
  geom_errorbarh(aes(xmin = year - se_value, xmax = year + se_value), height = 0.2) +
  labs(x = "Year", y = "Average Milk/Cow/Day (KGs)", color = "Class") +
  theme_minimal()

# Convert ggplot to plotly object
fig <- ggplotly(p)

# Display the interactive plotly line graph
fig
```

```{r}
#| title: Yearly Average Comparison of Highs and Low

# Aggregate data to calculate yearly averages
yearly_data <- Data %>%
  group_by(year) %>%
  summarise(
    highs = mean(highs, na.rm = TRUE),
    low = mean(low, na.rm = TRUE)
  )

# Reshape data for visualization
tidy_yearly_data <- yearly_data %>%
  pivot_longer(cols = c(highs, low), names_to = "variable", values_to = "value")

# Create the line plot with ggplot2
p <- ggplot(tidy_yearly_data, aes(x = year, y = value, color = variable, group = variable)) +
  geom_line() +
  geom_point() +  # Add points to highlight each year
  labs(x = "Year", y = "Average Milk/Cow/Day (KGs)				
", color = "Class") +
  theme_minimal()

# Convert ggplot to plotly object
fig <- ggplotly(p)

# Display the interactive plotly line graph
fig
```

## Column {width="40%"}

```{r}
#| title: Data

# Select and arrange the specified columns from Data
Data_selected <- Data %>%
  select(date, cows_in_milk, cows_in_tank, milk_produced, milk_per_cow, straw_yard, highs, trial1, trial2) %>%
  arrange(date)

# Create an interactive table with custom column names and options
datatable(
  Data_selected,
  colnames = c("Date", "Cows in Milk", "Cows in Tank", "Milk Produced", "Milk per Cow", "Straw Yard", "Highs", "Trial 1", "Trial 2"),
  options = list(
    dom = "lrtip", 
    paging = TRUE,
    lengthMenu = c(5, 10, 25),
    pageLength = 10, 
    scrollY = TRUE
  )
)
```

# Milk Quality {orientation="columns"}

## Column {width="60%"}

```{r}
#| label: Milk Quality-values
#| results: hide

# Calculate average bs from 2018-2023 and round to one decimal point
avg_bs <- Data %>%
  summarize(avg_bs = round(mean(bs, na.rm = TRUE), 1)) %>%
  pull(avg_bs)

# Calculate average fat from 2018-2023 and round to one decimal point
avg_fat <- Data %>%
  summarize(avg_fat = round(mean(fat, na.rm = TRUE), 1)) %>%
  pull(avg_fat)
```

### Row {height="20%"}

```{r}
#| component: valuebox
#| title: "Bacterial Score Average"

list(color = "primary",
  value = avg_bs
)
```

```{r}
#| component: valuebox
#| title: "Fat % Average"

list(color = "primary",
  value = avg_fat
)
```

### Row {height="40%"}

```{r}
#| title: Yearly Average Bacterial Score

# Aggregate data to calculate yearly averages and standard errors for bs
yearly_data_bs <- Data %>%
  group_by(year) %>%
  summarise(
    bs = mean(bs, na.rm = TRUE),
    bs_se = sd(bs, na.rm = TRUE) / sqrt(n())
  )

# Plot bs percentages with horizontal error bars
p_bs <- ggplot(yearly_data_bs, aes(x = year, y = bs)) +
  geom_line(size = 1, color = "skyblue") +
  geom_point(size = 2, color = "skyblue") +
  geom_errorbarh(aes(xmin = year - bs_se, xmax = year + bs_se, y = bs),
                 color = "red", height = 1, size = 0.5) +  # Horizontal error bars
  labs(x = "Year", y = "BS ('000/ml)") +
  theme_minimal()

# Convert ggplot to plotly object
fig_bs <- ggplotly(p_bs)

# Display the interactive plot
fig_bs


```

### Row {height="40%" .tabset}

```{r}
#| title: Yearly Average Somatic Cell Count

# Aggregate data to calculate yearly averages and standard errors for bs
yearly_data_scc <- Data %>%
  group_by(year) %>%
  summarise(
    scc = mean(scc, na.rm = TRUE),
    scc_se = sd(scc, na.rm = TRUE) / sqrt(n())
  )

# Plot bs percentages with horizontal error bars
p_scc <- ggplot(yearly_data_scc, aes(x = year, y = scc)) +
  geom_line(size = 1, color = "blue") +
  geom_point(size = 2, color = "blue") +
  geom_errorbarh(aes(xmin = year - scc_se, xmax = year + scc_se, y = scc),
                 color = "red", height = 3, size = 0.5) +  # Horizontal error bars
  labs(x = "Year", y = "SCC ('000/ml)") +
  theme_minimal()

# Convert ggplot to plotly object
fig_scc <- ggplotly(p_scc)

# Display the interactive plot
fig_scc

```

```{r}
#| title: Yearly Average Comparison of SCC and BS

# Extract year from date
Data$year <- year(Data$date)

# Aggregate data to calculate yearly averages
yearly_data <- Data %>%
  group_by(year) %>%
  summarise(
    scc = mean(scc, na.rm = TRUE),
    bs = mean(bs, na.rm = TRUE)
  )

# Reshape data for visualization
tidy_yearly_data <- yearly_data %>%
  pivot_longer(cols = c(scc, bs), names_to = "variable", values_to = "value")

# Create the bar plot with ggplot2
p <- ggplot(tidy_yearly_data, aes(x = factor(year), y = value, fill = variable)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Year", y = "'000/ml", fill = "Variable") +
  theme_minimal()

# Convert ggplot to plotly object
fig <- ggplotly(p)

# Display the interactive plotly bar plot
fig
```

## Column {width="40%"}

```{r}
#| title: Data
# Select and arrange the specified columns from Data
Data_selected <- Data %>%
  select(date, hscc, scc, bs, fat, protein) %>%
  arrange(date)

# Create an interactive table with custom column names and options
datatable(
  Data_selected,
  colnames = c("Date", "Hscc", "Scc", "Bs", "Fat", "Protein"),
  options = list(
    dom = "lrtip", 
    paging = TRUE,
    lengthMenu = c(5, 10, 25),
    pageLength = 10, 
    scrollY = TRUE
  )
)
```

# Data

```{r}
# Select and arrange the specified columns from Data
Data_selected <- Data %>%
  select(date, cows_in_milk, cows_in_tank, milk_produced, milk_per_cow, straw_yard, highs, trial1, trial2, low, hscc, scc, bs, fat, protein) %>%
  arrange(date)

# Create an interactive table with custom column names and options
datatable(
  Data_selected,
  colnames = c("Date", "Cows in Milk", "Cows in Tank", "Milk Produced", "Milk per Cow", "Straw Yard", "Highs", "Trial 1", "Trial 2", "Low", "Hscc", "Scc", "Bs", "Fat", "Protein"),
  options = list(
    dom = "lrtip", 
    paging = TRUE,
    lengthMenu = c(5, 10, 25),
    pageLength = 10, 
    scrollY = TRUE
  )
)
```
