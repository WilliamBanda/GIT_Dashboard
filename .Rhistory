"C:\Users\WilliamBanda1\Downloads\5-untidy (1).xlsx"
## 00 Setup
# Get working directory
getwd() # Prints working directory in Console
## Set working directory
setwd("C:/Users/WilliamBanda1/Downloads")
"C:\Users\WilliamBanda1\Downloads\5-untidy (1).xlsx"
#Let's get the necessarly libraries
library(readr)
Data <- read_csv("C:\Users\WilliamBanda1\Downloads\5-untidy (1).xlsx", # file path
Data <- read_csv("C:/Users/WilliamBanda1/Downloads/5-untidy_(1).xlsx", # file path
show_col_types = TRUE)   # show column types
Data <- read_csv("C:/Users/WilliamBanda1/Downloads/5-untidy_(1).xlsx", # file path
show_col_types = TRUE)   # show column types
Data <- readxl::("C:/Users/WilliamBanda1/Downloads/5-untidy_(1).xlsx", # file path
Data <- read.excel("C:/Users/WilliamBanda1/Downloads/5-untidy_(1).xlsx", # file path
show_col_types = TRUE)   # show column types
# Load the openxlsx package
library(openxlsx)
Data <- read.excel("C:/Users/WilliamBanda1/Downloads/5-untidy_(1).xlsx", # file path
show_col_types = TRUE)   # show column types
Data <- read.excel("5-untidy_(1).xlsx", # file path
show_col_types = TRUE)   # show column types
Data <- read.excel("5-untidy_(1).xlsx")
#Let's get the necessarly libraries
library(readr)
# Load the openxlsx package
library(openxlsx)
Data <- read.excel("5-untidy_(1).xlsx")
#Let's get the necessarly libraries
library(readr)
# Install and load the openxlsx package if you haven't already done so
install.packages("openxlsx")
install.packages("openxlsx")
library(openxlsx)
# Read the Excel file
Data <- read.xlsx("5-untidy_(1).xlsx")
# Install and load the openxlsx package if you haven't already done so
install.packages("openxlsx", dep = T")
# Install and load the openxlsx package if you haven't already done so
install.packages("openxlsx", dep = T)
# Install and load the openxlsx package if you haven't already done so
install.packages("openxlsx", dep = T)
install.packages("openxlsx", dep = T)
#Let's get the necessarly libraries
library(readr)
# Install and load the openxlsx package if you haven't already done so
install.packages("openxlsx", dep = T)
install.packages("openxlsx", dep = T)
library(openxlsx)
# Read the Excel file
Data <- read.xlsx("5-untidy_(1).xlsx")
# Install packages
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(shiny)){install.packages("shiny")}
# Load packages
library(tidyverse)
library(shiny)
# Install packages
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(shiny)){install.packages("shiny")}
# Load packages
library(tidyverse)
library(shiny)
version
version
quarto_version()
quarto_version
quarto::quarto_version()
library(tidyverse)
library(readr)
library(dplyr)
library(openxlsx)
library(ggplot2)
library(shiny)
library(writexl)
library(plotly)
library(reshape2)
library(readxl)
library(scales)
library(DT)
library(gt)
# Set a theme
theme_set(theme_minimal(base_size = 24, base_family = "Atkinson Hyperlegible"))
Data <- read_excel("tidy_data.xlsx")
#| label: set-inputs
time_period <- paste(params$month, params$year)
#| label: all-values
#| results: hide
# Filter data for the years 2018-2023
Data_filtered <- Data %>%
filter(format(as.Date(date), "%Y") %in% 2018:2023)
Data <- Data %>%
filter(format(as.Date(date), "%Y") %in% 2018:2023)
#| label: all-values
#| results: hide
# Calculate average milk produced from 2018-2023
avg_milk_produced <- Data %>%
summarize(avg_milk_produced = mean(milk_produced, na.rm = TRUE)) %>%
pull(avg_milk_produced)
# Calculate average milk per cow from 2018-2023
avg_milk_per_cow <- Data %>%
summarize(avg_milk_per_cow = mean(milk_per_cow, na.rm = TRUE)) %>%
pull(avg_milk_per_cow)
# Calculate average protein % from 2018-2023
avg_protein <- Data %>%
summarize(avg_protein = mean(protein, na.rm = TRUE)) %>%
pull(avg_protein)
Data %>%
summarize(avg_milk_produced = mean(milk_produced, na.rm = TRUE)) %>%
pull(avg_milk_produced)
Data %>%
summarize(avg_milk_produced = mean(milk_produced, na.rm = TRUE)) %>%
pull(avg_milk_produced) %>% round(digits = 1)
#| label: all-values
#| results: hide
# Calculate average milk produced from 2018-2023
avg_milk_produced <- Data %>%
summarize(avg_milk_produced = mean(milk_produced, na.rm = TRUE)) %>%
pull(avg_milk_produced) %>% round(digits = 1)
# Calculate average milk per cow from 2018-2023
avg_milk_per_cow <- Data %>%
summarize(avg_milk_per_cow = mean(milk_per_cow, na.rm = TRUE)) %>%
pull(avg_milk_per_cow) %>% round(digits = 1)
# Calculate average protein % from 2018-2023
avg_protein <- Data %>%
summarize(avg_protein = mean(protein, na.rm = TRUE)) %>%
pull(avg_protein) %>% round(digits = 1)
#| title: Yearly Averages for Number of Cows in Tank
# Calculate yearly averages for cows_in_tank
yearlyData <- Data %>%
mutate(year = format(as.Date(date), "%Y")) %>%
group_by(year) %>%
summarize(avg_cows_in_tank = mean(cows_in_tank, na.rm = TRUE))
# Create a bar plot for the yearly averages of cows_in_tank using ggplot
p <- ggplot(yearlyData, aes(x = year, y = avg_cows_in_tank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Year", y = "Average Number of Cows in Tank") +
theme_minimal()
p
# Convert the ggplot to a plotly object
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
# Ensure the 'date' column is in Date format
Data$date <- as.Date(Data$date)
# Extract year from date
Data$year <- year(Data$date)
# Aggregate data to calculate yearly total milk produced
yearly_data <- Data %>%
filter(year >= 2018 & year <= 2023) %>%
group_by(year) %>%
summarise(total_milk_produced = sum(milk_produced, na.rm = TRUE))
# Create the bar plot with ggplot2
p <- ggplot(yearly_data, aes(x = factor(year), y = total_milk_produced, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Total Milk Produced (KGs)") +
theme_minimal() +
scale_y_continuous(labels = scales::comma) +
guides(fill = FALSE)  # Remove legend
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
yearly_data
p <- ggplot(yearly_data, aes(x = factor(year), y = total_milk_produced, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Total Milk Produced (KGs)") +
theme_minimal() +
scale_y_continuous(labels = scales::comma) +
guides(fill = FALSE)  # Remove legend
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
p <- ggplot(yearly_data, aes(x = factor(year), y = total_milk_produced, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Total Milk Produced (KGs)") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
p <- ggplot(yearly_data, aes(x = factor(year), y = total_milk_produced, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Total Milk Produced (KGs)") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
version
library(readr)
library(dplyr)
library(openxlsx)
library(ggplot2)
library(shiny)
library(writexl)
library(plotly)
library(reshape2)
library(readxl)
library(scales)
library(DT)
library(gt)
install.packages("plotly")
install.packages("ggplot2")
library(readr)
library(dplyr)
library(openxlsx)
library(ggplot2)
library(shiny)
library(writexl)
library(plotly)
library(reshape2)
library(readxl)
library(scales)
library(DT)
library(gt)
Data <- read_excel("tidy_data.xlsx")
Data <- Data %>%
filter(format(as.Date(date), "%Y") %in% 2018:2023)
#| label: set-inputs
time_period <- "2018-2023"
#| label: all-values
#| results: hide
# Calculate average milk produced from 2018-2023
avg_milk_produced <- Data %>%
summarize(avg_milk_produced = mean(milk_produced, na.rm = TRUE)) %>%
pull(avg_milk_produced) %>% round(digits = 1)
# Calculate average milk per cow from 2018-2023
avg_milk_per_cow <- Data %>%
summarize(avg_milk_per_cow = mean(milk_per_cow, na.rm = TRUE)) %>%
pull(avg_milk_per_cow) %>% round(digits = 1)
# Calculate average protein % from 2018-2023
avg_protein <- Data %>%
summarize(avg_protein = mean(protein, na.rm = TRUE)) %>%
pull(avg_protein) %>% round(digits = 1)
#| title: Yearly Averages for Number of Cows in Tank
# Calculate yearly averages for cows_in_tank
yearlyData <- Data %>%
mutate(year = format(as.Date(date), "%Y")) %>%
group_by(year) %>%
summarize(avg_cows_in_tank = mean(cows_in_tank, na.rm = TRUE))
# Create a bar plot for the yearly averages of cows_in_tank using ggplot
p <- ggplot(yearlyData, aes(x = year, y = avg_cows_in_tank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Year", y = "Average Number of Cows in Tank") +
theme_minimal()
# Convert the ggplot to a plotly object
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
# Print the interactive Plotly graph
fig
### Column {width="60%"}
```{r}
#| title: "Sum Total of Milk Produced per Year (2018-2023)"
# Ensure the 'date' column is in Date format
Data$date <- as.Date(Data$date)
#| title: Yearly Average Comparison of Fat and Protein Percentages
# Aggregate data to calculate yearly averages
yearly_data <- Data %>%
group_by(year) %>%
summarise(protein = mean(protein, na.rm = TRUE),
fat = mean(fat, na.rm = TRUE))
Data$year <- year(Data$date)
library(lubridate)
Data$year <- year(Data$date)
#| title: Yearly Averages for Number of Cows in Tank
# Calculate yearly averages for cows_in_tank
yearlyData <- Data %>%
mutate(year = format(as.Date(date), "%Y")) %>%
group_by(year) %>%
summarize(avg_cows_in_tank = mean(cows_in_tank, na.rm = TRUE))
# Create a bar plot for the yearly averages of cows_in_tank using ggplot
p <- ggplot(yearlyData, aes(x = year, y = avg_cows_in_tank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Year", y = "Average Number of Cows in Tank") +
theme_minimal()
# Convert the ggplot to a plotly object
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
Data$year <- factor(year(Data$date))
#| title: Yearly Averages for Number of Cows in Tank
# Calculate yearly averages for cows_in_tank
yearlyData <- Data %>%
group_by(year) %>%
summarize(avg_cows_in_tank = mean(cows_in_tank, na.rm = TRUE))
# Create a bar plot for the yearly averages of cows_in_tank using ggplot
p <- ggplot(yearlyData, aes(x = year, y = avg_cows_in_tank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Year", y = "Average Number of Cows in Tank") +
theme_minimal()
# Convert the ggplot to a plotly object
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
# Aggregate data to calculate yearly total milk produced
yearly_data <- Data %>%
group_by(year) %>%
summarise(total_milk_produced = sum(milk_produced, na.rm = TRUE))
# Create the bar plot with ggplot2
p <- ggplot(yearly_data, aes(x = factor(year), y = total_milk_produced, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Total Milk Produced (KGs)") +
theme_minimal() +
scale_y_continuous(labels = scales::comma) +
guides(fill = FALSE)  # Remove legend
# Create the bar plot with ggplot2
p <- ggplot(yearly_data, aes(x = factor(year), y = total_milk_produced, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Total Milk Produced (KGs)") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Aggregate data to calculate yearly total or average
yearly_data <- Data %>%
group_by(year) %>%
summarise(milk_per_cow = mean(milk_per_cow, na.rm = TRUE))  # Use sum() if you want total instead of mean
# Create the bar plot with ggplot2
p <- ggplot(yearly_data, aes(x = factor(year), y = total_milk_produced, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Total Milk Produced (KGs)") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
# Aggregate data to calculate yearly total milk produced
yearly_data <- Data %>%
group_by(year) %>%
summarise(total_milk_produced = sum(milk_produced, na.rm = TRUE))
# Create the bar plot with ggplot2
p <- ggplot(yearly_data, aes(x = factor(year), y = total_milk_produced, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Total Milk Produced (KGs)") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create the bar plot with ggplot2
p <- ggplot(yearly_data, aes(x = factor(year), y = total_milk_produced, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Total Milk Produced (KGs)") +
theme_minimal() +
scale_y_continuous(labels = scales::comma) +
theme(legend.position = "none")
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create a bar plot for the yearly averages of cows_in_tank using ggplot
p <- ggplot(yearlyData, aes(x = year, y = avg_cows_in_tank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Year", y = "Average Number of Cows in Tank") +
theme_minimal()+
theme(legend.position = "none")
# Convert the ggplot to a plotly object
fig <- ggplotly(p)
# Print the interactive Plotly graph
fig
#| title: Daily Average Milk per Cow per Year
# Aggregate data to calculate yearly total or average
yearly_data <- Data %>%
group_by(year) %>%
summarise(milk_per_cow = mean(milk_per_cow, na.rm = TRUE))  # Use sum() if you want total instead of mean
# Create the bar plot with ggplot2
p <- ggplot(yearly_data, aes(x = factor(year), y = milk_per_cow, fill = factor(year))) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Av/Milk/Cow (KGs)") +
theme_minimal() +
theme(legend.position = "none")
# Print the ggplot object to check
print(p)
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
#| title: Yearly Average Comparison of Fat and Protein Percentages
# Aggregate data to calculate yearly averages
yearly_data <- Data %>%
group_by(year) %>%
summarise(protein = mean(protein, na.rm = TRUE),
fat = mean(fat, na.rm = TRUE))
# Reshape data for visualization
tidy_yearly_data <- yearly_data %>%
pivot_longer(cols = c(protein, fat), names_to = "variable", values_to = "value")
# Create the line plot with ggplot2
p <- ggplot(tidy_yearly_data, aes(x = factor(year), y = value, color = variable, group = variable)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
labs(x = "Year", y = "Average Percentage (%)", color = "Nutrient") +
scale_color_manual(values = c("protein" = "steelblue", "fat" = "coral")) +  # Custom colors
theme_minimal() +
theme(legend.position = "none")
# Reshape data for visualization
tidy_yearly_data <- yearly_data %>%
pivot_longer(cols = c(protein, fat), names_to = "variable", values_to = "value")
library(dplyr)
# Reshape data for visualization
tidy_yearly_data <- yearly_data %>%
pivot_longer(cols = c(protein, fat), names_to = "variable", values_to = "value")
library(tidyverse)
?pivot_longer
library(tidyverse)
library(readr)
library(dplyr)
library(openxlsx)
library(ggplot2)
library(shiny)
library(writexl)
library(plotly)
library(reshape2)
library(readxl)
library(scales)
library(DT)
library(gt)
library(lubridate)
#| title: Comparison of Dairy Cow by Class per Year
# Reshape the data to long format
long_data <- Data %>%
pivot_longer(cols = c(straw_yard, highs, trial1, trial2, low),
names_to = "variable",
values_to = "value")
# Create the bar plot with ggplot2
p <- ggplot(long_data, aes(x = factor(year), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Year", y = "Average Milk/Cow/Day (KGs)
", fill = "Class") +
theme_minimal()
# Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
#| title: Yearly Average Comparison of Trial1 and Trial2
# Aggregate data to calculate yearly averages
yearly_data <- Data %>%
group_by(year) %>%
summarise(
trial1 = mean(trial1, na.rm = TRUE),
trial2 = mean(trial2, na.rm = TRUE)
)
# Reshape data for visualization
tidy_yearly_data <- yearly_data %>%
pivot_longer(cols = c(trial1, trial2), names_to = "variable", values_to = "value")
# Create the line plot with ggplot2
p <- ggplot(tidy_yearly_data, aes(x = year, y = value, color = variable, group = variable)) +
geom_line() +
geom_point() +  # Add points to highlight each year
labs(x = "Year", y = "Average Milk/Cow/Day (KGs)
", color = "Class") +
theme_minimal()
# Convert ggplot to plotly object
fig <- ggplotly(p)
# Display the interactive plotly line graph
fig
#| title: Yearly Average Comparison of Highs and Low
# Aggregate data to calculate yearly averages
yearly_data <- Data %>%
group_by(year) %>%
summarise(
highs = mean(highs, na.rm = TRUE),
low = mean(low, na.rm = TRUE)
)
# Reshape data for visualization
tidy_yearly_data <- yearly_data %>%
pivot_longer(cols = c(highs, low), names_to = "variable", values_to = "value")
# Create the line plot with ggplot2
p <- ggplot(tidy_yearly_data, aes(x = year, y = value, color = variable, group = variable)) +
geom_line() +
geom_point() +  # Add points to highlight each year
labs(x = "Year", y = "Average Milk/Cow/Day (KGs)
", color = "Class") +
theme_minimal()
# Convert ggplot to plotly object
fig <- ggplotly(p)
# Display the interactive plotly line graph
fig
# Display the interactive plotly line graph
fig
## Column {width="40%"}
```{r}
#| title: Data
#| title: Data
# Select and arrange the specified columns from Data
Data_selected <- Data %>%
select(date, cows_in_milk, cows_in_tank, milk_produced, milk_per_cow, straw_yard, highs, trial1, trial2) %>%
arrange(date)
# Create an interactive table with custom column names and options
datatable(
Data_selected,
colnames = c("Date", "Cows in Milk", "Cows in Tank", "Milk Produced", "Milk per Cow", "Straw Yard", "Highs", "Trial 1", "Trial 2"),
options = list(
dom = "lrtip",
paging = TRUE,
lengthMenu = c(5, 10, 25),
pageLength = 10,
scrollY = TRUE
)
)
# Create an interactive table with custom column names and options
datatable(
Data_selected,
colnames = c("Date", "Cows in Milk", "Cows in Tank", "Milk Produced", "Milk per Cow", "Straw Yard", "Highs", "Trial 1", "Trial 2"),
options = list(
dom = "lrtip",
paging = TRUE,
lengthMenu = c(5, 10, 25),
pageLength = 10,
scrollY = TRUE
)
)
# Milk Quality {orientation="columns"}
